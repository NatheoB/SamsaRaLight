[{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://natheob.github.io/SamsaRaLight/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://natheob.github.io/SamsaRaLight/articles/1-simple_case.html","id":"virtual-stand-geometry","dir":"Articles","previous_headings":"Inputs","what":"Virtual stand geometry","title":"1 - A first simple case","text":"SamsaRaLight needs run axis-aligned rectangle stand split square identical cells. rectangle stand can given homogeneous slope given orientation aspect. Finally, radiation depends plot location, user needs precise latitude/longitude coordinates stand. virtual stand represented axis-aligned rectangle, user can also refer Tutorial 4 (4 - Create virtual stand tree inventory).","code":"# Information of the plot are given here infos <- SamsaRaLight::data_prenovel$info infos #>      latitude     longitude        size_x        size_y         slope  #>      46.52666       5.82765     100.00000     100.00000       6.00000  #>        aspect north_to_x_cw  #>     144.00000      54.00000  # Coordinates of the stand (for monthly radiation and rays geometry) latitude <- infos[[\"latitude\"]] # The latitude of the stand (Y-coord in WGS85) longitude <- infos[[\"longitude\"]] # The longitude of the plot (X-coord in WGS85)  # The slope of the stand slope <- infos[[\"slope\"]]  # Angle of slope bottom on the compass from the North, clockwise rotation (in degrees) # northern aspect : 0, eastern aspect : 90, southern aspect : 180, western aspect : 270 aspect <- infos[[\"aspect\"]]  # Angle from North to x axis clockwise. (in degrees) # Default correspond to a Y axis oriented toward the North. north_to_x_cw <- infos[[\"north_to_x_cw\"]]  # Considering a squared plot, number and size of the cells composing the grid cell_size <- 1 # Size of the length of a cell n_cells_x <- infos[[\"size_x\"]] / cell_size # Number of cells columns n_cells_y <- infos[[\"size_y\"]] / cell_size # Number of cells rows"},{"path":"https://natheob.github.io/SamsaRaLight/articles/1-simple_case.html","id":"trees-description","dir":"Articles","previous_headings":"Inputs","what":"Trees description","title":"1 - A first simple case","text":"user needs define trees composing stand crown dimensions. data frame must created specific format variables: see documentation using ?SamsaRaLight::sl_run understand composition trees dataset. dataframe must contain mandatory information trees: unique integer id (id_tree), species name (species), coordinates (x, y) diameter breast height cm (dbh_cm). x y coordinates must given relatively rectangle plot defined (thus 0≤x≤cellsize*ncellsx0 \\le x \\le cellsize * ncells_x 0≤y≤cellsize*ncellsy0 \\le y \\le cellsize * ncells_y) given flat plane, considering slope. z coordinate computed automatically process. tutorial, represent tree crowns simple shapes, defined crown_type column specific code: “E” (ellipsoid) “P” (paraboloid). ellipsoidal shape “E” commonly used broadleaved species, whereas paraboloidal shape “P” commonly used conifers. using simple crown shapes, user must provide 3 values define crown dimensions: height tree (h_m meters), height crown base (hbase_m meters) crown maximum radius four cardinal directions wonsider simple symetric crowns (rn_m, re_m, rs_m rw_m, meters). considering type simple crown shapes (“E” “P”), user must provide hmax_m variable, height crown radius maximum. Indeed, automatically computed process, set crown base height (hmax=hbasehmax = hbase) considering paraboloidal shape “P”, set middle crown ellipsoidal shape “E” (hmax=h−0.5*(h−hbase)hmax = h - 0.5*(h - hbase)). next tutorials, explain details columns crown_openess/crown_lad (3 - Consider crowns either porous envelop turbid medium) consider complex asymetric crown shapes (5 - Represent crowns complex shapes).","code":"data_trees <- SamsaRaLight::data_prenovel$trees  head(data_trees) #>   id_tree    species       x       y  dbh_cm crown_type     h_m hbase_m hmax_m #> 1       1 Abies alba 77.7336 71.0808 22.9320          P 14.8120  3.3073     NA #> 2       2 Abies alba 62.5783 65.1864 18.2397          P 12.9612  4.7429     NA #> 3       3 Abies alba 84.0060 95.2483 22.8472          P 15.8187  4.9055     NA #> 4       4 Abies alba 58.9521 97.9011 19.1539          P 11.7033  4.2050     NA #> 5       5 Abies alba 33.3423 39.4053 19.8852          P 14.6597  3.8346     NA #> 6       6 Abies alba 57.5743  2.0656 20.1293          P 16.6530  7.6860     NA #>     rn_m   re_m   rs_m   rw_m crown_openess crown_lad #> 1 3.0204 3.0204 3.0204 3.0204           0.2     0.767 #> 2 3.0896 3.0896 3.0896 3.0896           0.2     0.767 #> 3 2.8350 2.8350 2.8350 2.8350           0.2     0.767 #> 4 2.5196 2.5196 2.5196 2.5196           0.2     0.767 #> 5 2.8208 2.8208 2.8208 2.8208           0.2     0.767 #> 6 3.2436 3.2436 3.2436 3.2436           0.2     0.767"},{"path":"https://natheob.github.io/SamsaRaLight/articles/1-simple_case.html","id":"monthly-radiations","dir":"Articles","previous_headings":"Inputs","what":"Monthly radiations","title":"1 - A first simple case","text":"user needs define data frame monthly energy specific plot location. month (represented integer number 1 12), one needs inform HradHrad global monthly energies (MJ.m−2MJ.m^{-2}), DGratioDGratio ratio diffuse energy relative global energy (needed represent proportion diffuse direct energy). data frame can automatically constructed using SamsaRaLight function SamsaRaLight::get_monthly_rad(), given latitude longitude plot. gets radiation data PVGIS European database (needs Internet connection). Otherwise, monthly radiation data frame used tutorial (Prenovel stand) stored within package can retrieved using SamsaRaLight::data_prenovel$radiations.","code":"# Create the monthly radiation data frame data_monthly_rad <- SamsaRaLight::get_monthly_rad(latitude, longitude) data_monthly_rad #>    month     Hrad  DGratio #> 1      1 137.0902 0.580625 #> 2      2 206.3025 0.506875 #> 3      3 353.8260 0.493125 #> 4      4 465.8220 0.490000 #> 5      5 535.2458 0.508750 #> 6      6 618.1785 0.463750 #> 7      7 655.1730 0.425000 #> 8      8 557.6332 0.436250 #> 9      9 423.9382 0.446875 #> 10    10 280.2780 0.475000 #> 11    11 157.9635 0.538750 #> 12    12 116.4960 0.587500"},{"path":"https://natheob.github.io/SamsaRaLight/articles/1-simple_case.html","id":"run-samsaralight","dir":"Articles","previous_headings":"","what":"Run SamsaRaLight","title":"1 - A first simple case","text":"Now, given stand geometry, trees dataset monthly radiation, can easily run SamsaraLight ray-tracing model using function sl_run(). Note computation time increase exponentially cell size decreasing. function arguments addressed throughout next tutorials, especially last one (8 - Deeper understanding SamsaraLight parameters).","code":"sl_output <- SamsaRaLight::sl_run(     # Trees     trees = data_trees,           # Radiations     monthly_rad = data_monthly_rad,     latitude = latitude,           # Stand geometry     slope = slope,      aspect = aspect,      north_to_x_cw = north_to_x_cw,     cell_size = cell_size,      n_cells_x = n_cells_x,      n_cells_y = n_cells_y   )"},{"path":[]},{"path":"https://natheob.github.io/SamsaRaLight/articles/1-simple_case.html","id":"plot-the-virtual-stand","dir":"Articles","previous_headings":"Outputs","what":"Plot the virtual stand","title":"1 - A first simple case","text":"user can first observe virtual stand using function plot_sl_output() directly output object.","code":"plot_sl_output(sl_output)"},{"path":"https://natheob.github.io/SamsaRaLight/articles/1-simple_case.html","id":"output-format","dir":"Articles","previous_headings":"Outputs","what":"Output format","title":"1 - A first simple case","text":"output complex R object, first list three elements: $input (gathers inputs model defined ), $monthly_rays containing rays cast toward cell $output (containing output SamsaraLight ray-tracing model). , focus outputs model cells $output$cells trees $output$trees. output sensors $output$sensors explained Tutorial 7 (7 - Estimate light virtual sensors) $monthly_rays addressed next tutorial (2 - Importance stand latitude, slope orientation).","code":"str(sl_output) #> List of 3 #>  $ input       :List of 3 #>   ..$ trees      :'data.frame':  333 obs. of  15 variables: #>   .. ..$ id_tree      : int [1:333] 1 2 3 4 5 6 7 8 9 10 ... #>   .. ..$ species      : chr [1:333] \"Abies alba\" \"Abies alba\" \"Abies alba\" \"Abies alba\" ... #>   .. ..$ x            : num [1:333] 77.7 62.6 84 59 33.3 ... #>   .. ..$ y            : num [1:333] 71.1 65.2 95.2 97.9 39.4 ... #>   .. ..$ dbh_cm       : num [1:333] 22.9 18.2 22.8 19.2 19.9 ... #>   .. ..$ crown_type   : chr [1:333] \"P\" \"P\" \"P\" \"P\" ... #>   .. ..$ h_m          : num [1:333] 14.8 13 15.8 11.7 14.7 ... #>   .. ..$ hbase_m      : num [1:333] 3.31 4.74 4.91 4.21 3.83 ... #>   .. ..$ hmax_m       : logi [1:333] NA NA NA NA NA NA ... #>   .. ..$ rn_m         : num [1:333] 3.02 3.09 2.83 2.52 2.82 ... #>   .. ..$ re_m         : num [1:333] 3.02 3.09 2.83 2.52 2.82 ... #>   .. ..$ rs_m         : num [1:333] 3.02 3.09 2.83 2.52 2.82 ... #>   .. ..$ rw_m         : num [1:333] 3.02 3.09 2.83 2.52 2.82 ... #>   .. ..$ crown_openess: num [1:333] 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 ... #>   .. ..$ crown_lad    : num [1:333] 0.767 0.767 0.767 0.767 0.767 0.767 0.767 0.767 0.767 0.767 ... #>   ..$ monthly_rad:'data.frame':  12 obs. of  3 variables: #>   .. ..$ month  : int [1:12] 1 2 3 4 5 6 7 8 9 10 ... #>   .. ..$ Hrad   : num [1:12] 137 206 354 466 535 ... #>   .. ..$ DGratio: num [1:12] 0.581 0.507 0.493 0.49 0.509 ... #>   ..$ info       :List of 17 #>   .. ..$ latitude          : num 46.5 #>   .. ..$ start_day         : num 1 #>   .. ..$ end_day           : num 365 #>   .. ..$ slope             : num 6 #>   .. ..$ north_to_x_cw     : num 54 #>   .. ..$ aspect            : num 144 #>   .. ..$ cell_size         : num 1 #>   .. ..$ n_cells_x         : num 100 #>   .. ..$ n_cells_y         : num 100 #>   .. ..$ soc               : logi TRUE #>   .. ..$ height_anglemin   : num 10 #>   .. ..$ direct_startoffset: num 0 #>   .. ..$ direct_anglestep  : num 5 #>   .. ..$ diffuse_anglestep : num 15 #>   .. ..$ use_torus         : logi TRUE #>   .. ..$ turbid_medium     : logi TRUE #>   .. ..$ trunk_interception: logi TRUE #>  $ monthly_rays:List of 2 #>   ..$ energies: Named num [1:4] 2440 2095 2289 2061 #>   .. ..- attr(*, \"names\")= chr [1:4] \"slope_direct\" \"slope_diffuse\" \"horizontal_direct\" \"horizontal_diffuse\" #>   ..$ rays    :'data.frame': 491 obs. of  5 variables: #>   .. ..$ id_ray      : int [1:491] 1 2 3 4 5 6 7 8 9 10 ... #>   .. ..$ azimut      : num [1:491] 4.96 4.9 4.82 4.75 4.67 ... #>   .. ..$ height_angle: num [1:491] 0.111 0.156 0.198 0.237 0.273 ... #>   .. ..$ e_incident  : num [1:491] 8.62 8.62 8.62 8.62 8.62 ... #>   .. ..$ direct      : logi [1:491] TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ output      :List of 3 #>   ..$ sensors:'data.frame':  0 obs. of  7 variables: #>   .. ..$ id_sensor: int(0)  #>   .. ..$ x        : num(0)  #>   .. ..$ y        : num(0)  #>   .. ..$ z        : num(0)  #>   .. ..$ e        : num(0)  #>   .. ..$ pacl     : num(0)  #>   .. ..$ punobs   : num(0)  #>   ..$ trees  :'data.frame':  333 obs. of  8 variables: #>   .. ..$ id_tree: int [1:333] 116 92 46 273 176 4 272 157 89 29 ... #>   .. ..$ x      : num [1:333] 13.4 43.1 72.8 93.7 44.9 ... #>   .. ..$ y      : num [1:333] 99.2 98 98 98.1 97.3 ... #>   .. ..$ z      : num [1:333] 10.4 10.3 10.3 10.3 10.2 ... #>   .. ..$ epot   : num [1:333] 387315 253854 203115 76454 221087 ... #>   .. ..$ e      : num [1:333] 115800 96237 56294 15399 9713 ... #>   .. ..$ lci    : num [1:333] 0.606 0.686 0.672 0.803 0.959 ... #>   .. ..$ eunobs : num [1:333] 83985 81000 45459 10109 1318 ... #>   ..$ cells  :'data.frame':  10000 obs. of  7 variables: #>   .. ..$ id_cell : int [1:10000] 1 2 3 4 5 6 7 8 9 10 ... #>   .. ..$ x_center: num [1:10000] 0.5 1.5 2.5 3.5 4.5 5.5 6.5 7.5 8.5 9.5 ... #>   .. ..$ y_center: num [1:10000] 99.5 99.5 99.5 99.5 99.5 99.5 99.5 99.5 99.5 99.5 ... #>   .. ..$ z_center: num [1:10000] 10.5 10.5 10.5 10.5 10.5 ... #>   .. ..$ e       : num [1:10000] 480 534 524 508 490 ... #>   .. ..$ pacl    : num [1:10000] 0.105 0.117 0.115 0.111 0.107 ... #>   .. ..$ punobs  : num [1:10000] 0.308 0.377 0.473 0.406 0.329 ..."},{"path":[]},{"path":"https://natheob.github.io/SamsaRaLight/articles/1-simple_case.html","id":"output-cell","dir":"Articles","previous_headings":"Outputs > Understand the output cells and trees SamsaraLight variables","what":"Output cell","title":"1 - A first simple case","text":"object $output$cells contains output light variables cell, identified unique id (id_cell) coordinates cell center (x_center, y_center, z_center). 3 output variables, e (energy arriving cell MJ), pacl (proportion light canopy, ratio energy arriving cell energy interception trees) punobs (proportion energy cell comes unobstructed rays, .e. rays intercepted trees). user can plot given output variable (e.g. cells.fill = “e” cells.fill = “pacl) without trees (trees.fill = NULL) observe light distribution within stand (absolute relative light). Aesthetic arguments can tweaked, cell borders (cell.borders = FALSE) palette used filling cells (e.g. cells.fill.palette =”light” cells.fill.palette = “light01” forcing limits palette 0 1).","code":"head(sl_output$output$cells) #>   id_cell x_center y_center z_center        e      pacl    punobs #> 1       1      0.5     99.5 10.45787 480.1922 0.1053010 0.3077038 #> 2       2      1.5     99.5 10.45787 534.4402 0.1171970 0.3767941 #> 3       3      2.5     99.5 10.45787 524.3878 0.1149927 0.4734174 #> 4       4      3.5     99.5 10.45787 507.7187 0.1113373 0.4059686 #> 5       5      4.5     99.5 10.45787 490.2187 0.1074998 0.3291288 #> 6       6      5.5     99.5 10.45787 486.8014 0.1067504 0.2460796 plot_sl_output(sl_output,                trees.fill = NULL,                cells.fill = \"e\",                cells.fill.palette = \"light\",                cells.border = FALSE) plot_sl_output(sl_output,                trees.fill = NULL,                cells.fill = \"pacl\",                cells.fill.palette = \"light01\",                cells.border = FALSE)"},{"path":"https://natheob.github.io/SamsaRaLight/articles/1-simple_case.html","id":"output-tree","dir":"Articles","previous_headings":"Outputs > Understand the output cells and trees SamsaraLight variables","what":"Output tree","title":"1 - A first simple case","text":"object $output$trees contains output light variables trees, identified unique id (id_trees) coordinates (x, y, z). 4 output variables, e (total energy intercepted tree MJ), epot (potential energy intercepted tree without considering neighbors MJ, .e. total energy intercepted tree alone crown dimensions), lci=1−e/epotlci = 1 - e/epot (light competition index, representing real intercepted energy compared potential energy intercept without competition, see Beauchamp et al. 2025) punobs (proportion energy intercepted tree comes unobstructed rays, .e. rays intercepted trees). user can plot given output variable (e.g. trees.fill = “e” trees.fill = “lci”) without cells filled (cells.fill = NULL) observe light interception trees (absolute scaled represent competition). Aesthetic arguments can tweaked, inversing palette colors (trees.fill.inverse = TRUE, better represent competition viridis, lci = 1 indicates trees strong light competition).","code":"head(sl_output$output$trees) #>   id_tree       x       y        z      epot          e       lci    eunobs #> 1     116 13.4212 99.1656 10.42272 387315.14 115800.300 0.6064701 83985.216 #> 2      92 43.1255 98.0173 10.30203 253854.10  96236.706 0.6855485 81000.256 #> 3      46 72.7660 98.0420 10.30463 203115.21  56293.576 0.6715528 45459.168 #> 4     273 93.6610 98.0882 10.30949  76453.85  15399.010 0.8029645 10108.939 #> 5     176 44.9346 97.3227 10.22903 221086.99   9713.166 0.9587289  1318.271 #> 6       4 58.9521 97.9011 10.28982 103895.59  18328.933 0.7483866 14097.755 plot_sl_output(sl_output,                trees.fill = \"e\",                cells.fill = NULL) plot_sl_output(sl_output,                trees.fill = \"lci\",                trees.fill.inverse = TRUE,                cells.fill = NULL)"},{"path":"https://natheob.github.io/SamsaRaLight/articles/1-simple_case.html","id":"gather-all-the-samsaralight-outputs","dir":"Articles","previous_headings":"Outputs","what":"Gather all the SamsaraLight outputs","title":"1 - A first simple case","text":", user can decide plot light output trees cells, even adding species tree associated (trees.border.species = TRUE).","code":"plot_sl_output(sl_output,                trees.border.species = TRUE,                trees.fill = \"lci\",                trees.fill.inverse = TRUE,                cells.fill = \"pacl\",                cells.fill.palette = \"light01\",                cells.border = FALSE)"},{"path":[]},{"path":"https://natheob.github.io/SamsaRaLight/articles/2-stand_geometry.html","id":"create-virtual-stands","dir":"Articles","previous_headings":"Run the experiment","what":"Create virtual stands","title":"2 - Understand stand information","text":"tutorial, create scratch virtual stand single large tree center.","code":"# Stand dimensions cell_size <- 1 stand_size_x <- 100 stand_size_y <- 100  # Variable needed for creating the trees table names(SamsaRaLight::data_prenovel$trees) #>  [1] \"id_tree\"       \"species\"       \"x\"             \"y\"             #>  [5] \"dbh_cm\"        \"crown_type\"    \"h_m\"           \"hbase_m\"       #>  [9] \"hmax_m\"        \"rn_m\"          \"re_m\"          \"rs_m\"          #> [13] \"rw_m\"          \"crown_openess\" \"crown_lad\"  # Creating the table for this experiment (i.e. one big tree on the middle of the stand) data_tree <- data.frame(   id_tree = 1,   species = \"Fagus sylvatica\",   x = stand_size_x / 2,   y = stand_size_y / 2,   dbh_cm = 100,   crown_type = \"E\",   h_m = 40,   hbase_m = 20,   hmax_m = NA,   rn_m = 6,   re_m = 6,   rs_m = 6,   rw_m = 6,   crown_openess = 0.2,   crown_lad = 1 )  data_tree #>   id_tree         species  x  y dbh_cm crown_type h_m hbase_m hmax_m rn_m re_m #> 1       1 Fagus sylvatica 50 50    100          E  40      20     NA    6    6 #>   rs_m rw_m crown_openess crown_lad #> 1    6    6           0.2         1"},{"path":"https://natheob.github.io/SamsaRaLight/articles/2-stand_geometry.html","id":"define-the-experimental-design","dir":"Articles","previous_headings":"Run the experiment","what":"Define the experimental design","title":"2 - Understand stand information","text":", define experimental design, latitude/slope/aspect combinations want test.","code":"exp_design <- expand.grid(   city = c(\"Madrid\", \"Brussels\", \"Oslo\"), # Define three towns with different latitudes in Europe   slope = c(0, 20),   aspect = c(0, 180) ) %>%       # Set the longitude/latitude of our three towns   dplyr::mutate(     latitude = case_match(city,                           \"Madrid\" ~ 40.4167,                           \"Brussels\" ~ 50.8477,                           \"Oslo\" ~ 59.9122),     longitude = case_match(city,                           \"Madrid\" ~ -3.7033,                           \"Brussels\" ~ 4.3572,                           \"Oslo\" ~ 10.7313)   ) %>%    dplyr::filter(!(slope == 0 & aspect != 0)) %>% # Because aspect do not change anything in a flat plane   dplyr::mutate(stand_geom = case_when(                   slope == 0 ~ \"flat\",                   slope > 0 & aspect == 0 ~ \"slope north\",                   slope > 0 & aspect == 180 ~ \"slope south\"),                 mod_id = row_number()) %>%    dplyr::relocate(mod_id)  exp_design #>   mod_id     city slope aspect latitude longitude  stand_geom #> 1      1   Madrid     0      0  40.4167   -3.7033        flat #> 2      2 Brussels     0      0  50.8477    4.3572        flat #> 3      3     Oslo     0      0  59.9122   10.7313        flat #> 4      4   Madrid    20      0  40.4167   -3.7033 slope north #> 5      5 Brussels    20      0  50.8477    4.3572 slope north #> 6      6     Oslo    20      0  59.9122   10.7313 slope north #> 7      7   Madrid    20    180  40.4167   -3.7033 slope south #> 8      8 Brussels    20    180  50.8477    4.3572 slope south #> 9      9     Oslo    20    180  59.9122   10.7313 slope south"},{"path":"https://natheob.github.io/SamsaRaLight/articles/2-stand_geometry.html","id":"run-samsaralight-for-each-virtual-stand","dir":"Articles","previous_headings":"Run the experiment","what":"Run SamsaraLight for each virtual stand","title":"2 - Understand stand information","text":"","code":"# Store SamsaraLight outputs in a list out_sl <- vector(\"list\", nrow(exp_design)) for (i in 1:nrow(exp_design)) {      mod_design <- exp_design[i,]      # Get the radiation from PVGIS database   tmp_rad <- SamsaRaLight::get_monthly_rad(mod_design$latitude, mod_design$longitude)      # Run SamsaraLight   out_sl[[i]] <- SamsaRaLight::sl_run(     trees = data_tree,     monthly_rad = tmp_rad,     cell_size = cell_size,     n_cells_x = stand_size_x / cell_size,      n_cells_y = stand_size_y / cell_size,      latitude = mod_design$latitude,      slope = mod_design$slope,      aspect = mod_design$aspect   )  }"},{"path":[]},{"path":"https://natheob.github.io/SamsaRaLight/articles/2-stand_geometry.html","id":"understand-the-discretisation-of-direct-and-diffuse-rays","dir":"Articles","previous_headings":"Observe the outputs","what":"Understand the discretisation of direct and diffuse rays","title":"2 - Understand stand information","text":"discretisation rays given $monthly_rays$rays sl_run() function output, total energy (MJ.m−2MJ.^{m-2}) given $monthly_rays$energies direct diffuse radiations, either horizontal flat plane slope. basic output variables use direct diffuse energies slope, horizontal energies needed case using virtual sensors (see Tutorial 7 - Estimate light virtual sensors). direct rays (direct = TRUE) created following trajectory sun across year, depends stand latitude diffuse rays (direct = FALSE) discretized creating rays coming directions across sky. direction ray defined azimut, orientation height_angle column, radians. incident energies direct diffuse rays (MJ.m−2MJ.^{m-2}) estimated monthly global energy diffuse global ratio, created function SamsaRaLight::get_monthly_rad().","code":"out_sl[[4]]$monthly_rays$energies #>       slope_direct      slope_diffuse  horizontal_direct horizontal_diffuse  #>           3052.300           1893.455           4289.146           1941.553  head(out_sl[[4]]$monthly_rays$rays) #>   id_ray   azimut height_angle e_incident direct #> 1      1 5.478378    0.4405345   17.30552   TRUE #> 2      2 5.396980    0.4846145   17.30567   TRUE #> 3      3 5.310983    0.5243855   17.30579   TRUE #> 4      4 5.220347    0.5593080   17.30588   TRUE #> 5      5 5.125242    0.5888384   17.30594   TRUE #> 6      6 5.026082    0.6124568   17.30599   TRUE"},{"path":"https://natheob.github.io/SamsaRaLight/articles/2-stand_geometry.html","id":"change-in-incident-energy-with-stand-latitude-and-geometry","dir":"Articles","previous_headings":"Observe the outputs","what":"Change in incident energy with stand latitude and geometry","title":"2 - Understand stand information","text":"","code":"# Create a dataframe for comparing incident energies out_sl %>%    purrr::map(~as.data.frame(as.list(.x$monthly_rays$energies))) %>%    dplyr::bind_rows(.id = \"mod_id\") %>%    dplyr::mutate(mod_id = as.integer(mod_id),                 horizontal_total = horizontal_direct + horizontal_diffuse,                 slope_total = slope_direct + slope_diffuse) %>%    tidyr::pivot_longer(!mod_id,                        names_pattern = \"(.*)_(.*)\",                       names_to = c(\"surface\", \"type\"),                       values_to = \"energy\") %>%    dplyr::left_join(exp_design, by = \"mod_id\") %>%    dplyr::filter(surface == \"slope\") %>%     # Plot the graphic   ggplot(aes(y = energy, x = type)) +   geom_col() +   facet_grid(cols = vars(city), rows = vars(stand_geom)) +   theme_bw() +   ylab(\"Incident energy in MJ/m2\") +   xlab(\"Type of the rays\")"},{"path":"https://natheob.github.io/SamsaRaLight/articles/2-stand_geometry.html","id":"plot-the-samsaralight-outputs","dir":"Articles","previous_headings":"Observe the outputs","what":"Plot the SamsaraLight outputs","title":"2 - Understand stand information","text":"","code":"# Store plots in a list plot_list <- vector(\"list\", nrow(exp_design)) legend <- NULL for (i in 1:nrow(exp_design)) {      mod_design <- exp_design[i,]      # Plot the stand with light outputs   tmp_sl_plot <- SamsaRaLight::plot_sl_output(out_sl[[i]],                                               trees.fill = \"species\",                                               cells.fill = \"pacl\",                                               cells.fill.palette = \"viridis\")      # Change some ggplot2 features   tmp_sl_plot <- tmp_sl_plot +     labs(subtitle = paste(mod_design$city,                            \"|\", mod_design$stand_geom)) +     theme(legend.position = \"top\",           axis.text = element_blank(),           plot.subtitle = element_text(size = 8, hjust = 0.5)) +     scale_color_continuous(limits = c(0.9, 1))             # Fetch the legend if it is not already done   # And remove the plot legend after that   if (is.null(legend)) {     legend <- cowplot::get_legend(tmp_sl_plot)   }      tmp_sl_plot <- tmp_sl_plot + theme(legend.position = \"none\")           # Add the plot to the list   plot_list[[i]] <- tmp_sl_plot }  # Gather all the plots using the cowplot package cowplot::plot_grid(   legend,   cowplot::plot_grid(plotlist = plot_list,                      nrow = 3, ncol = 3),   rel_heights = c(1, 10),   ncol = 1 )"},{"path":"https://natheob.github.io/SamsaRaLight/articles/3-transmission_model.html","id":"understand-differences-between-the-two-transmisison-models","dir":"Articles","previous_headings":"","what":"Understand differences between the two transmisison models","title":"3 - Choose the transmission model","text":"user can choose two transmission models either considering crowns porous envelop turbid medium. two models differ transmitted light computed ray intercepted crown. porous envelop model, ray crosses crown, energy ray decreased proportion given crown crown openness parameter. turbid medium, crown considered homogeneous fluid transmitted energy ray computed using Beer-Lambert law, thus depending path length ray across crown different parameters leaf area density LAD. two models clearly defined Ligot et al. (2014). user may choose one two models, define correct parameter values crown depending chosen model : crown_openess porous envelop model crown_lad turbid medium.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/articles/3-transmission_model.html","id":"defining-the-crown-openness-and-the-crown-lad","dir":"Articles","previous_headings":"","what":"Defining the crown openness and the crown LAD","title":"3 - Choose the transmission model","text":"EXPLAIN VALUES LAD CROWN OPENESS","code":""},{"path":[]},{"path":"https://natheob.github.io/SamsaRaLight/articles/3-transmission_model.html","id":"run-the-samsaralight-models","dir":"Articles","previous_headings":"Compare both transmission model","what":"Run the SamsaraLight models","title":"3 - Choose the transmission model","text":"","code":"# Define cells grid cell_size <- 5  n_cells_x <- SamsaRaLight::data_prenovel$info[[\"size_x\"]] / cell_size n_cells_y <- SamsaRaLight::data_prenovel$info[[\"size_y\"]] / cell_size  # Run SamsaraLight with crowns as a porous envelop sl_out_porous <- SamsaRaLight::sl_run(   # Trees   trees = SamsaRaLight::data_prenovel$trees,       # Radiations   monthly_rad = SamsaRaLight::data_prenovel$radiations,   latitude = SamsaRaLight::data_prenovel$info[[\"latitude\"]],       # Stand geometry   slope = SamsaRaLight::data_prenovel$info[[\"slope\"]],    aspect = SamsaRaLight::data_prenovel$info[[\"aspect\"]],    north_to_x_cw = SamsaRaLight::data_prenovel$info[[\"north_to_x_cw\"]],   cell_size = cell_size,    n_cells_x = n_cells_x,    n_cells_y = n_cells_y,      # Transmission model   turbid_medium = FALSE )  # Run SamsaraLight with crowns as a turbid medium sl_out_turbid <- SamsaRaLight::sl_run(   # Trees   trees = SamsaRaLight::data_prenovel$trees,       # Radiations   monthly_rad = SamsaRaLight::data_prenovel$radiations,   latitude = SamsaRaLight::data_prenovel$info[[\"latitude\"]],       # Stand geometry   slope = SamsaRaLight::data_prenovel$info[[\"slope\"]],    aspect = SamsaRaLight::data_prenovel$info[[\"aspect\"]],    north_to_x_cw = SamsaRaLight::data_prenovel$info[[\"north_to_x_cw\"]],   cell_size = cell_size,    n_cells_x = n_cells_x,    n_cells_y = n_cells_y,      # Transmission model   turbid_medium = TRUE )"},{"path":"https://natheob.github.io/SamsaRaLight/articles/3-transmission_model.html","id":"compare-tree-light-interceptions","dir":"Articles","previous_headings":"Compare both transmission model","what":"Compare tree light interceptions","title":"3 - Choose the transmission model","text":"","code":"data_comparison <- dplyr::bind_rows(   sl_out_porous$output$trees %>% dplyr::mutate(model = \"porous\"),   sl_out_turbid$output$trees %>% dplyr::mutate(model = \"turbid\") ) %>%    dplyr::select(id_tree, model, e, epot, lci) %>%    tidyr::pivot_longer(!c(id_tree, model),                       names_to = \"var\",                       values_to = \"value\") %>%    tidyr::pivot_wider(names_from = \"model\",                      values_from = \"value\") %>%    dplyr::mutate(diff = turbid - porous) %>%    dplyr::left_join(SamsaRaLight::data_prenovel$trees,                    by = \"id_tree\") data_comparison %>%     ggplot(aes(y = turbid, x = porous, color = species)) +   geom_point() +   facet_wrap(~var, scale = \"free\") +   theme_bw() +   theme(legend.position = \"top\") +   geom_abline(slope = 1, intercept = 0, color = \"black\") data_comparison %>%     ggplot(aes(y = diff, x = dbh_cm, color = species)) +   geom_point() +   facet_wrap(~var, scale = \"free\") +   theme_bw() +   theme(legend.position = \"top\") +   geom_hline(yintercept = 0, color = \"black\")"},{"path":"https://natheob.github.io/SamsaRaLight/articles/4-core_polygon.html","id":"inventory-info-and-constraints","dir":"Articles","previous_headings":"","what":"Inventory info and constraints","title":"4 - Create a virtual stand from an inventory","text":"tutorial, use inventory collected scope IRRES project, aims understand mechanisms transition even-aged uneven-aged management. , IRRES1 stand composed common spruce Douglas fir, coppice stool beech center silver fir larch trees. format protocol inventory lead us two new constraints: inventory zone appeared rectangle, axis-aligned : need axis-aligned rectangle stand include inventory zone inside. coordinates particular coordinate system: need convert ones relative created virtual rectangle stand.","code":"head(SamsaRaLight::data_IRRES1$trees) #>   id_tree              species        x        y dbh_cm crown_type   h_m #> 1       1 Pseudtsuga menziesii 263190.6 114308.9   36.5          P 28.22 #> 2       3 Pseudtsuga menziesii 263181.9 114298.9   37.3          P 31.18 #> 3       4          Picea abies 263185.0 114302.7   18.7          P 19.48 #> 4       5          Picea abies 263183.3 114312.4   27.0          P 23.39 #> 5       6 Pseudtsuga menziesii 263180.1 114307.6   31.0          P 30.87 #> 6       7          Picea abies 263181.4 114304.5   22.0          P 21.04 #>   hbase_m hmax_m rn_m rs_m re_m rw_m crown_openess crown_lad #> 1   10.42     NA 3.80 3.80 3.80 3.80           0.6       0.5 #> 2   14.44     NA 3.94 3.94 3.94 3.94           0.6       0.5 #> 3    9.99     NA 2.09 2.09 2.09 2.09           0.6       0.5 #> 4   11.38     NA 2.39 2.39 2.39 2.39           0.6       0.5 #> 5   13.04     NA 3.97 3.97 3.97 3.97           0.6       0.5 #> 6   10.54     NA 2.21 2.21 2.21 2.21           0.6       0.5 ggplot(SamsaRaLight::data_IRRES1$trees,         aes(fill = species)) +   # Radius here are the same across the four cardinals (symmetric crowns)   geom_circle(mapping = aes(x0 = x,                              y0 = y,                              r = rn_m)) +    coord_equal() +   theme_bw()"},{"path":"https://natheob.github.io/SamsaRaLight/articles/4-core_polygon.html","id":"define-the-inventory-zone","dir":"Articles","previous_headings":"","what":"Define the inventory zone","title":"4 - Create a virtual stand from an inventory","text":"first need define inventory zone creating data.frame vertices. tutorial, IRRES1 rectangle inventory zone, thus defined 4 vertices. core polygon data.frame stored within SamsaRaLight::data_IRRES1 package resource:","code":"SamsaRaLight::data_IRRES1$core_polygon #>          x        y #> 1 263193.1 114310.3 #> 2 263168.5 114237.4 #> 3 263045.3 114279.0 #> 4 263070.0 114351.9 ggplot(SamsaRaLight::data_IRRES1$trees,         aes(fill = species)) +   # Radius here are the same across the four cardinals (symmetric crowns)   geom_circle(mapping = aes(x0 = x,                              y0 = y,                              r = rn_m)) +    coord_equal() +   theme_bw() +      # Plot the inventory zone   geom_polygon(data = SamsaRaLight::data_IRRES1$core_polygon,                 mapping = aes(x = x, y = y),                 inherit.aes = FALSE,                fill = \"yellow\", color = \"black\", alpha = 0.7)"},{"path":"https://natheob.github.io/SamsaRaLight/articles/4-core_polygon.html","id":"create-the-virtual-stand","dir":"Articles","previous_headings":"","what":"Create the virtual stand","title":"4 - Create a virtual stand from an inventory","text":"defining inventory zone polygon, need include axis-aligned rectangle plot coordinates formatted 0 minimum witdth/height including inventory zone. , user can use function create_rect_stand() create virtual stand modify trees core polygon coordinates, given cell size. output function returns list different elements : $trees updated tree data.frame shifted coordinates, $inv_zone_df updated core polygon data.frame shifted coordinates, $inv_zone_sf sf object corresponding core polygon $info list information virtual stand creation. can observe defined inventory zone new shifted coordinates:  Given $info output, see inventory zone 1.0003075 hectare (“core_area_ha”) total basal area 29.9018908m2.ha−1m^2.ha^{-1} (“core_batot_m2ha”). new created virtual stand now 1.725 hectare (“new_area_ha”) total basal area 17.3397598m2.ha−1m^2.ha^{-1} (“new_batot_m2ha”), necessary lower trees larger area. virtual stand composed 30 cells X-axis (“n_cells_x”) 23 cells Y-axis (“n_cells_y”), cell size chosen user. Finally, coordinates shifted -2.630442^{5} meters along X-axis (“shift_x”) -1.1423715^{5} meters along Y-axis (“shift_y”). can use information output create_rect_stand() run SamsaraLight model IRRES1 inventory : can observe output light distribution ground based new created virtual stand :","code":"cell_size <- 5 sl_stand <- create_rect_stand(   trees = SamsaRaLight::data_IRRES1$trees,   cell_size = cell_size,    core_polygon_df = SamsaRaLight::data_IRRES1$core_polygon ) str(sl_stand) #> List of 4 #>  $ trees      :'data.frame': 522 obs. of  16 variables: #>   ..$ id_tree      : int [1:522] 1 3 4 5 6 7 8 9 10 12 ... #>   ..$ species      : chr [1:522] \"Pseudtsuga menziesii\" \"Pseudtsuga menziesii\" \"Picea abies\" \"Picea abies\" ... #>   ..$ x            : num [1:522] 146 138 141 139 136 ... #>   ..$ y            : num [1:522] 71.8 61.8 65.6 75.2 70.5 ... #>   ..$ dbh_cm       : num [1:522] 36.5 37.3 18.7 27 31 22 17.7 33.9 33.5 21.7 ... #>   ..$ crown_type   : chr [1:522] \"P\" \"P\" \"P\" \"P\" ... #>   ..$ h_m          : num [1:522] 28.2 31.2 19.5 23.4 30.9 ... #>   ..$ hbase_m      : num [1:522] 10.42 14.44 9.99 11.38 13.04 ... #>   ..$ hmax_m       : logi [1:522] NA NA NA NA NA NA ... #>   ..$ rn_m         : num [1:522] 3.8 3.94 2.09 2.39 3.97 2.21 2.18 4.78 2.62 2.16 ... #>   ..$ rs_m         : num [1:522] 3.8 3.94 2.09 2.39 3.97 2.21 2.18 4.78 2.62 2.16 ... #>   ..$ re_m         : num [1:522] 3.8 3.94 2.09 2.39 3.97 2.21 2.18 4.78 2.62 2.16 ... #>   ..$ rw_m         : num [1:522] 3.8 3.94 2.09 2.39 3.97 2.21 2.18 4.78 2.62 2.16 ... #>   ..$ crown_openess: num [1:522] 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.6 ... #>   ..$ crown_lad    : num [1:522] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... #>   ..$ added_to_fill: logi [1:522] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ inv_zone_df:'data.frame': 5 obs. of  2 variables: #>   ..$ x: num [1:5] 148.9 124.3 1.1 25.8 148.9 #>   ..$ y: num [1:5] 73.15 0.25 41.85 114.75 73.15 #>  $ inv_zone_sf:Classes 'sf' and 'data.frame':    1 obs. of  2 variables: #>   ..$ id      : int 1 #>   ..$ geometry:sfc_POLYGON of length 1; first list element: List of 1 #>   .. ..$ : num [1:5, 1:2] 148.9 124.3 1.1 25.8 148.9 ... #>   .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" #>   ..- attr(*, \"sf_column\")= chr \"geometry\" #>  $ info       :List of 10 #>   ..$ core_area_ha   : num 1 #>   ..$ core_batot_m2ha: num 29.9 #>   ..$ n_added_tree   : num 0 #>   ..$ new_area_ha    : num 1.73 #>   ..$ new_batot_m2ha : num 17.3 #>   ..$ cell_size      : num 5 #>   ..$ n_cells_x      : num 30 #>   ..$ n_cells_y      : num 23 #>   ..$ shift_x        : num -263044 #>   ..$ shift_y        : num -114237 ggplot(sl_stand$trees, aes(fill = species)) +   # Radius here are the same across the four cardinals (symmetric crowns)   geom_circle(mapping = aes(x0 = x,                              y0 = y,                              r = rn_m)) +    coord_equal() +   theme_bw() +   geom_sf(data = sl_stand$inv_zone_sf, inherit.aes = FALSE,           fill = \"yellow\", color = \"black\", alpha = 0.7) #> Coordinate system already present. #> ℹ Adding new coordinate system, which will replace the existing one. out_sl <- SamsaRaLight::sl_run(   # Trees   trees = sl_stand$trees,       # Radiations   monthly_rad = SamsaRaLight::data_IRRES1$radiations,   latitude = SamsaRaLight::data_IRRES1$info[[\"latitude\"]],       # Stand geometry   slope = SamsaRaLight::data_IRRES1$info[[\"slope\"]],    aspect = SamsaRaLight::data_IRRES1$info[[\"aspect\"]],    north_to_x_cw = SamsaRaLight::data_IRRES1$info[[\"north_to_x_cw\"]],   cell_size = cell_size,       # Here, the size of the new axis-aligned rectangle stand are stored in the    # output of the create_rect_stand() function   n_cells_x = sl_stand$info$n_cells_x,    n_cells_y = sl_stand$info$n_cells_y,      # Transmission model (default is the turbid medium)   turbid_medium = TRUE ) plot_sl_output(out_sl,                 cells.fill = \"pacl\",                 cells.fill.palette = \"light01\")"},{"path":"https://natheob.github.io/SamsaRaLight/articles/4-core_polygon.html","id":"fill-the-virtual-stand-around-the-inventory-zone","dir":"Articles","previous_headings":"","what":"Fill the virtual stand around the inventory zone","title":"4 - Create a virtual stand from an inventory","text":"can see , inventory zone including center empty stand. However, running SamsaraLigth model virtual stand bias light estimation, trees edge stand may intercept energies field, fact surrounded trees inventoried. Consequently, light ground around inventory zone appeared higher field. counteract constraint, can mimic consistent surrounding environment filling virtual stand around inventory zone trees composed inventory, reach total basal area per hectare inventory zone. , virtual stand can considered representative inventory zone. , can set argument fill_around TRUE create_rect_stand(). can observe new created filled axis-aligned rectangle plot :  can use new information output create_rect_stand() run SamsaraLight model IRRES1 inventory considering surrounding environment. can observe final output light distribution ground based new created virtual stand. can fill trees new variables created trees dataset create_rect_stand() (added_to_fill) TRUE tree initial inventory added fill around core polygon:","code":"sl_stand_filled <- create_rect_stand(   trees = SamsaRaLight::data_IRRES1$trees,   cell_size = cell_size,    core_polygon_df = SamsaRaLight::data_IRRES1$core_polygon,   fill_around = TRUE ) ggplot(sl_stand_filled$trees, aes(fill = species)) +   # Radius here are the same across the four cardinals (symmetric crowns)   geom_circle(mapping = aes(x0 = x,                              y0 = y,                              r = rn_m)) +    coord_equal() +   theme_bw() +   geom_sf(data = sl_stand_filled$inv_zone_sf, inherit.aes = FALSE,           fill = \"yellow\", color = \"black\", alpha = 0.7) #> Coordinate system already present. #> ℹ Adding new coordinate system, which will replace the existing one. out_sl_filled <- SamsaRaLight::sl_run(   # Trees   trees = sl_stand_filled$trees,       # Radiations   monthly_rad = SamsaRaLight::data_IRRES1$radiations,   latitude = SamsaRaLight::data_IRRES1$info[[\"latitude\"]],       # Stand geometry   slope = SamsaRaLight::data_IRRES1$info[[\"slope\"]],    aspect = SamsaRaLight::data_IRRES1$info[[\"aspect\"]],    north_to_x_cw = SamsaRaLight::data_IRRES1$info[[\"north_to_x_cw\"]],   cell_size = cell_size,       # Here, the size of the new axis-aligned rectangle stand are stored in the    # output of the create_rect_stand() function   n_cells_x = sl_stand_filled$info$n_cells_x,    n_cells_y = sl_stand_filled$info$n_cells_y,      # Transmission model (default is the turbid medium)   turbid_medium = TRUE ) plot_sl_output(out_sl_filled,                 cells.fill = \"pacl\",                 cells.fill.palette = \"light01\",                trees.fill = \"added_to_fill\")"},{"path":"https://natheob.github.io/SamsaRaLight/articles/4-core_polygon.html","id":"understanding-the-torus-system","dir":"Articles","previous_headings":"","what":"Understanding the torus system","title":"4 - Create a virtual stand from an inventory","text":"constraint edges inventory zone also extended edges rectangle virtual plot. Indeed, model represents surrounding environment virtual stand ? , model represents stand torus system (see Courbaud et al. 2003), looks like “donuts” form, virtually gathering left rights edges rectangle, top bottom edges together. Specifically, considers trees top edges surrounding trees bottom edges (inversely), trees left edges surrounded trees right edges (inversely). , can consider trees point virtual stand surrounded trees representative stand. SamsaRaLight R package, torus system default applied default argument use_torus = TRUE sl_run() function. can compare light ground IRRES1 inventory without applying torus system. can expect, relative light ground greater edges virtual stands torus system applied.","code":"out_sl_filled_noTorus <- SamsaRaLight::sl_run(   # Trees   trees = sl_stand_filled$trees,       # Radiations   monthly_rad = SamsaRaLight::data_IRRES1$radiations,   latitude = SamsaRaLight::data_IRRES1$info[[\"latitude\"]],       # Stand geometry   slope = SamsaRaLight::data_IRRES1$info[[\"slope\"]],    aspect = SamsaRaLight::data_IRRES1$info[[\"aspect\"]],    north_to_x_cw = SamsaRaLight::data_IRRES1$info[[\"north_to_x_cw\"]],   cell_size = cell_size,       # Here, the size of the new axis-aligned rectangle stand are stored in the    # output of the create_rect_stand() function   n_cells_x = sl_stand_filled$info$n_cells_x,    n_cells_y = sl_stand_filled$info$n_cells_y,      # Transmission model (default is the turbid medium)   turbid_medium = TRUE,      # Use a torus system for representing plot edges (default to TRUE)   use_torus = FALSE )"},{"path":"https://natheob.github.io/SamsaRaLight/articles/4-core_polygon.html","id":"with-a-torus-system","dir":"Articles","previous_headings":"Understanding the torus system","what":"With a torus system","title":"4 - Create a virtual stand from an inventory","text":"","code":"plot_sl_output(out_sl_filled,                 cells.fill = \"pacl\",                 cells.fill.palette = \"light01\",                trees.fill = NULL)"},{"path":"https://natheob.github.io/SamsaRaLight/articles/4-core_polygon.html","id":"without-the-torus-system","dir":"Articles","previous_headings":"Understanding the torus system","what":"Without the torus system","title":"4 - Create a virtual stand from an inventory","text":"","code":"plot_sl_output(out_sl_filled_noTorus,                 cells.fill = \"pacl\",                 cells.fill.palette = \"light01\",                trees.fill = NULL)"},{"path":[]},{"path":"https://natheob.github.io/SamsaRaLight/articles/5-irregular_crowns.html","id":"fourth-of-an-ellispoidparaboloid","dir":"Articles","previous_headings":"Understand asymmetric crown shapes","what":"Fourth of an ellispoid/paraboloid","title":"5 - More complex crown shapes","text":"paraboloid (“P”) ellipsoid (“E”) can represented details splitting crown 4 different crown parts. Indeed, can represent complex crown shapes 4 fourth paraboloids (use modality “4P” crown_type column tree inventory) 4 fourth ellispoid (use modality “4E”). Using 4 fourth volume allows considering different crown radius 4 cardinal directions, provided tree inventory using columns rn_m (crown radius toward north), rs_m (crown radius toward south), rw_m (crown radius toward west), re_m (crown radius toward east). user decides use “4P” “4E” modality, column hmax_m still provided, model computes automatically. “P” “E” simple symmetric crown shapes, set crown base height (hmax=hbasehmax = hbase) considering fourths paraboloid “4P”, set middle crown considering fourths ellipsoids “4E” (hmax=h−0.5*(h−hbase)hmax = h - 0.5*(h - hbase)).","code":""},{"path":"https://natheob.github.io/SamsaRaLight/articles/5-irregular_crowns.html","id":"eighth-of-a-paraboloid","dir":"Articles","previous_headings":"Understand asymmetric crown shapes","what":"Eighth of a paraboloid","title":"5 - More complex crown shapes","text":"user can also represent even complex ellispoidal shape using modality “8E”. allows representing crown assembly 8 eighths ellispoids consider different heights top bottom crown parts . , user must provide four radius mentionned , must also provide hmax_m, height maximum crown radius (meters).","code":""},{"path":"https://natheob.github.io/SamsaRaLight/articles/5-irregular_crowns.html","id":"provide-information-for-complex-crown-shapes","dir":"Articles","previous_headings":"","what":"Provide information for complex crown shapes","title":"5 - More complex crown shapes","text":"tutorial, use “8E” ellispoids representing crown shapes, whether broadleaves conifers species. Indeed, several crown dimensions measured bechefa marteloscope: crown radius four directions (rn_m, rs_m, re_m, rw_m), tree height (h_m), crown base height (hbase_m) crown maximum radius height (hmax_m). allows better account variability tree crown shapes thus better estimate light interception competition. difficult observe full crown asymmetry 2D R plots : observe different hmax, neither 4 direction asymmetric radius). minima, can represent two-directionnal radius assymetry plotting trees using geom_ellipse() function ggforce R package, averaging north/south radii, east/west radii:","code":"head(SamsaRaLight::data_bechefa$trees, 20) #>    id_tree     species     x     y    dbh_cm crown_type  h_m hbase_m hmax_m #> 1      103       abies 163.1  67.3  68.43663         8E 38.5    16.6   28.2 #> 2      615 pseudotsuga  66.8  41.4  95.49297         8E 50.2    14.0   33.3 #> 3      102 pseudotsuga 159.2  58.2 111.72677         8E 48.2    10.8   27.1 #> 4      708 pseudotsuga  43.8  34.2 116.81973         8E 51.0    15.8   27.0 #> 5      707 pseudotsuga  51.4  34.1  99.94930         8E 50.5    16.0   26.7 #> 6      712 pseudotsuga  57.2  17.0 112.04508         8E 51.4    14.4   26.5 #> 7      714 pseudotsuga  50.3  20.7  99.94930         8E 50.0    15.4   26.2 #> 8      206       picea 127.7 101.5  46.15493         8E 34.4    13.7   26.0 #> 9      222 pseudotsuga 151.4  56.1 114.59156         8E 49.9     9.5   24.9 #> 10     608       picea  56.3  61.9  99.31268         8E 44.2    17.1   24.8 #> 11     113       abies 146.4 100.5  41.06198         8E 31.0     4.0   24.6 #> 12     312       picea 115.5  67.5  90.08170         8E 41.2    12.6   24.0 #> 13     522 pseudotsuga  92.8  35.7 102.81409         8E 49.5    17.1   23.7 #> 14     116       picea 142.1 108.5  34.37747         8E 28.8    16.5   23.6 #> 15     214       picea 133.1  85.4  48.06479         8E 36.5    15.0   23.5 #> 16     215       picea 138.7  82.3  49.65634         8E 33.9    13.9   23.5 #> 17     110       picea 150.0  83.6  57.29578         8E 33.1    15.7   23.5 #> 18     617 pseudotsuga  65.7  38.8  78.94085         8E 42.9    12.7   23.4 #> 19       4       picea 155.8 128.0  89.44508         8E 41.0    14.4   23.4 #> 20     104       abies 166.9  71.0  39.15212         8E 27.8     6.7   23.2 #>    rn_m rs_m re_m rw_m crown_openess crown_lad #> 1  4.32 4.12 3.70 5.20         0.035       0.6 #> 2  7.01 6.45 5.87 4.15         0.035       0.6 #> 3  8.38 6.72 4.69 6.51         0.035       0.6 #> 4  7.37 7.43 9.85 5.44         0.035       0.6 #> 5  6.73 5.16 3.40 5.76         0.035       0.6 #> 6  5.02 6.02 5.00 5.32         0.035       0.6 #> 7  5.60 5.57 3.12 5.40         0.035       0.6 #> 8  3.16 2.80 2.93 1.73         0.035       0.6 #> 9  5.83 6.52 6.90 3.15         0.035       0.6 #> 10 4.08 4.42 4.55 3.45         0.035       0.6 #> 11 3.43 2.84 3.78 2.05         0.035       0.6 #> 12 4.87 5.35 3.95 5.55         0.035       0.6 #> 13 6.11 6.11 5.70 5.95         0.035       0.6 #> 14 2.32 1.85 1.55 2.47         0.035       0.6 #> 15 3.13 2.24 3.59 2.55         0.035       0.6 #> 16 3.60 2.77 3.63 2.56         0.035       0.6 #> 17 5.23 4.72 4.28 4.18         0.035       0.6 #> 18 3.05 4.75 4.75 3.01         0.035       0.6 #> 19 4.02 6.41 6.08 5.46         0.035       0.6 #> 20 5.20 4.44 3.57 3.86         0.035       0.6 ggplot(SamsaRaLight::data_bechefa$trees,         aes(fill = species)) +   # Radius are averaged across south/north and east/west radii   geom_ellipse(mapping = aes(x0 = x,                               y0 = y,                               a = (re_m + rw_m) / 2,                              b = (rn_m + rs_m) / 2,                              angle = 0)) +    coord_equal() +   theme_bw()"},{"path":"https://natheob.github.io/SamsaRaLight/articles/5-irregular_crowns.html","id":"estimate-light-interception","dir":"Articles","previous_headings":"","what":"Estimate light interception","title":"5 - More complex crown shapes","text":"estimating light interception, works simple crowns.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/articles/5-irregular_crowns.html","id":"create-the-virtual-stand","dir":"Articles","previous_headings":"Estimate light interception","what":"Create the virtual stand","title":"5 - More complex crown shapes","text":"","code":"sl_stand <- SamsaRaLight::create_rect_stand(   trees = SamsaRaLight::data_bechefa$trees,   cell_size = 5,   core_polygon_df = SamsaRaLight::data_bechefa$core_polygon,   fill_around = TRUE )"},{"path":"https://natheob.github.io/SamsaRaLight/articles/5-irregular_crowns.html","id":"run-samsaralight","dir":"Articles","previous_headings":"Estimate light interception","what":"Run SamsaraLight","title":"5 - More complex crown shapes","text":"","code":"sl_out <- SamsaRaLight::sl_run(      # Trees   trees = sl_stand$trees,       # Radiations   monthly_rad = SamsaRaLight::data_bechefa$radiations,   latitude = SamsaRaLight::data_bechefa$info[[\"latitude\"]],       # Stand geometry   slope = SamsaRaLight::data_bechefa$info[[\"slope\"]],    aspect = SamsaRaLight::data_bechefa$info[[\"aspect\"]],    north_to_x_cw = SamsaRaLight::data_bechefa$info[[\"north_to_x_cw\"]],   cell_size = sl_stand$info$cell_size,    n_cells_x = sl_stand$info$n_cells_x,    n_cells_y = sl_stand$info$n_cells_y,      # Transmission model (default is the turbid medium)   turbid_medium = TRUE,      # Use a torus system for representing plot edges (default to TRUE)   use_torus = TRUE    )"},{"path":"https://natheob.github.io/SamsaRaLight/articles/5-irregular_crowns.html","id":"plot-the-output-stand-with-irregular-crowns","dir":"Articles","previous_headings":"","what":"Plot the output stand with irregular crowns","title":"5 - More complex crown shapes","text":"sake representation, plot inventoried trees specifying “trees.only_inv” argument TRUE. However, light estimation done considering filled virtual stand torus system.","code":"plot_sl_output(sl_out,                 cells.fill = \"pacl\",                 cells.fill.palette = \"light01\",                trees.only_inv = TRUE)"},{"path":"https://natheob.github.io/SamsaRaLight/articles/7-light_sensors.html","id":"observe-the-inventory-zone","dir":"Articles","previous_headings":"","what":"Observe the inventory zone","title":"7 - Add light sensors","text":"","code":"ggplot() +      # Plot the inventory zone   geom_polygon(data = SamsaRaLight::data_cloture20$core_polygon,                 mapping = aes(x = x, y = y),                 inherit.aes = FALSE,                fill = \"yellow\", color = \"black\", alpha = 0.7) +      # Trees with irregular crown shapes   geom_ellipse(data = SamsaRaLight::data_cloture20$trees,                mapping = aes(x0 = x,                               y0 = y,                               a = (re_m + rw_m) / 2,                              b = (rn_m + rs_m) / 2,                              angle = 0,                              fill = species)) +    coord_equal() +   theme_bw()"},{"path":"https://natheob.github.io/SamsaRaLight/articles/7-light_sensors.html","id":"create-the-virtual-stand","dir":"Articles","previous_headings":"","what":"Create the virtual stand","title":"7 - Add light sensors","text":"","code":"sl_stand <- create_rect_stand(   trees = SamsaRaLight::data_cloture20$trees,   cell_size = 5,   core_polygon_df = SamsaRaLight::data_cloture20$core_polygon,   fill_around = TRUE )"},{"path":[]},{"path":"https://natheob.github.io/SamsaRaLight/articles/7-light_sensors.html","id":"sensors-dataset-format","dir":"Articles","previous_headings":"Prepare the virtual stand with sensors","what":"Sensors dataset format","title":"7 - Add light sensors","text":"Mandatory varables id_sensor unique integer, sensor coordinates (x, y) virtual stand height sensor h_m meters. output pacl sensors, SamsaraLight model use . use order compare estimated PACL SamsaraLight model.","code":"SamsaRaLight::data_cloture20$sensors #>    id_sensor     x     y h_m pacl pacl_direct pacl_diffuse #> 1          1 22.00 56.64   2 0.11        0.13         0.10 #> 2          2 71.22 53.45   3 0.22        0.28         0.16 #> 3          3 75.30 53.45   3 0.26        0.31         0.21 #> 4          4 71.22 45.27   3 0.15        0.13         0.16 #> 5          5 71.22 37.21   3 0.13        0.08         0.17 #> 6          6 56.88 37.21   3 0.18        0.12         0.22 #> 7          7 68.11 24.30   2 0.27        0.29         0.24 #> 8          8 57.84 22.00   3 0.18        0.21         0.15 #> 9          9 57.84 26.11   3 0.10        0.12         0.09 #> 10        10 67.34 53.45   3 0.21        0.26         0.17 #> 11        11 22.00 64.82   3 0.17        0.20         0.15 #> 12        12 25.97 64.82   3 0.19        0.24         0.15 #> 13        13 25.97 68.74   3 0.12        0.09         0.14 #> 14        14 28.08 74.86   3 0.11        0.03         0.18 #> 15        15 32.00 68.74   3 0.12        0.07         0.17 #> 16        16 28.08 64.82   3 0.15        0.18         0.13"},{"path":"https://natheob.github.io/SamsaRaLight/articles/7-light_sensors.html","id":"important-shift-the-sensors-coordinates","dir":"Articles","previous_headings":"Prepare the virtual stand with sensors","what":"IMPORTANT: shift the sensors coordinates","title":"7 - Add light sensors","text":"However, used function create_rect_stand() shifted coordinates inventory include inside rectangle virtual stand. Thus, forget also apply shift sensors coordinates.","code":"data_sensors <- SamsaRaLight::data_cloture20$sensors %>%    dplyr::mutate(x = x + sl_stand$info$shift_x,                 y = y + sl_stand$info$shift_y)"},{"path":"https://natheob.github.io/SamsaRaLight/articles/7-light_sensors.html","id":"observe-sensors-within-the-virtual-stand","dir":"Articles","previous_headings":"Prepare the virtual stand with sensors","what":"Observe sensors within the virtual stand","title":"7 - Add light sensors","text":"sake representation, draw sensor large square.","code":"ggplot() +      # Plot the inventory zone   geom_polygon(data = sl_stand$inv_zone_df,                 mapping = aes(x = x, y = y),                 inherit.aes = FALSE,                fill = \"yellow\", color = \"black\", alpha = 0.7) +      # Trees with irregular crown shapes   geom_ellipse(data = sl_stand$trees,                mapping = aes(x0 = x,                               y0 = y,                               a = (re_m + rw_m) / 2,                              b = (rn_m + rs_m) / 2,                              angle = 0,                              fill = species)) +    coord_equal() +   theme_bw() +      # Add the sensors   geom_rect(data = data_sensors,             mapping = aes(xmin = x - 2,                           ymin = y - 2,                           xmax = x + 2,                           ymax = y + 2),             color = \"black\", fill = \"gray\", alpha = 0.7) +   geom_text(data = data_sensors,              mapping = aes(x = x, y = y, label = id_sensor),             size = 3)"},{"path":[]},{"path":"https://natheob.github.io/SamsaRaLight/articles/7-light_sensors.html","id":"run-samsaralight","dir":"Articles","previous_headings":"Estimate light arriving to the sensors","what":"Run SamsaraLight","title":"7 - Add light sensors","text":"inform SamsaraLight model sensors want compute light interception, provide sensor data.frame sensors argument. addition, can decide compute light interception sensors, trees cells (setting sensors_only = TRUE), greatly reduces computation time rays casted towards sensors, toward center cell.","code":"sl_out_sensors <- SamsaRaLight::sl_run(      # Trees   trees = sl_stand$trees,       # Sensors   sensors = data_sensors,   sensors_only = FALSE,      # Radiations   monthly_rad = SamsaRaLight::data_cloture20$radiations,   latitude = SamsaRaLight::data_cloture20$info[[\"latitude\"]],       # Stand geometry   slope = SamsaRaLight::data_cloture20$info[[\"slope\"]],    aspect = SamsaRaLight::data_cloture20$info[[\"aspect\"]],    north_to_x_cw = SamsaRaLight::data_cloture20$info[[\"north_to_x_cw\"]],   cell_size = sl_stand$info$cell_size,    n_cells_x = sl_stand$info$n_cells_x,    n_cells_y = sl_stand$info$n_cells_y,      # Consider a turbid medium as the transmission model (default is TRUE)   turbid_medium = TRUE,      # Use a torus system for representing plot edges (default to TRUE)   use_torus = TRUE,      # Consider trunk interception (default is TRUE)   trunk_interception = TRUE )"},{"path":"https://natheob.github.io/SamsaRaLight/articles/7-light_sensors.html","id":"observe-sensors-on-the-light-map","dir":"Articles","previous_headings":"Estimate light arriving to the sensors","what":"Observe sensors on the light map","title":"7 - Add light sensors","text":"","code":"plot_sl_output(sl_out_sensors,                trees.fill = NULL,                cells.fill = \"pacl\",                cells.fill.palette = \"light01\",                sensors.plot = TRUE)"},{"path":"https://natheob.github.io/SamsaRaLight/articles/7-light_sensors.html","id":"compare-observed-with-estimated-pacl","dir":"Articles","previous_headings":"Estimate light arriving to the sensors","what":"Compare observed with estimated PACL","title":"7 - Add light sensors","text":"estimated light arriving sensors stored $output$sensors object, format cells output. difference cells nergy estimated slope, whereas sensor output energy computed arriving horizontal plane. can compare estimated PACL measured one field:","code":"dplyr::left_join(      data_sensors %>%      dplyr::select(id_sensor, pacl) %>%      dplyr::rename_at(vars(-\"id_sensor\"), ~paste0(., \"_obs\")),      sl_out_sensors$output$sensors %>%      dplyr::select(id_sensor, pacl) %>%      dplyr::rename_at(vars(-\"id_sensor\"), ~paste0(., \"_pred\")),      by = \"id_sensor\" ) %>%       dplyr::mutate(     diff_pacl = pacl_obs - pacl_pred   ) %>%       ggplot(aes(y = pacl_pred, x = pacl_obs)) +   geom_point() +   geom_smooth(method = \"lm\", formula = y ~ x, color = \"salmon\") +   geom_abline(intercept = 0, slope = 1, color = \"skyblue\") +   xlab(\"Observed PACL from field data\") +   ylab(\"Predicted PACL with virtual sensors in SamsaraLight\") +   labs(title = \"Comparison between PACL from field sensors and predicted with SamsaraLight\",        subtitle = \"red line is a linear regression and blue line is the 1,1 control line for perfect fit\") +   theme_bw() +   theme(plot.title = element_text(hjust = 0.5),         plot.subtitle = element_text(hjust = 0.5))"},{"path":"https://natheob.github.io/SamsaRaLight/articles/7-light_sensors.html","id":"a-first-approach-for-lad-calibration","dir":"Articles","previous_headings":"","what":"A first approach for LAD calibration","title":"7 - Add light sensors","text":", LAD parameter set 0.5. Field sensors can used calibrate tree leaf area density, important parameter controls amount light arriving ground. , first approach found mean species’ LAD value minimize mean residuals observed predicted total PACL.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/articles/7-light_sensors.html","id":"run-samsaralight-with-different-lads","dir":"Articles","previous_headings":"A first approach for LAD calibration","what":"Run SamsaraLight with different LADs","title":"7 - Add light sensors","text":"","code":"LADs <- seq(0.001, 2, by = 0.001) out_residuals <- vector(\"list\", length(LADs)) i <- 0  time_start <- Sys.time()  for (lad in LADs) {      print(lad)   i <- i+1      # Set the tested LAD value   inv_test <- sl_stand$trees %>%      dplyr::mutate(crown_lad = lad)            # Run SamsaraLight   sl_out_sensors_test <- SamsaRaLight::sl_run(          # Trees     trees = inv_test,           # Sensors     sensors = data_sensors,     sensors_only = TRUE,          # Radiations     monthly_rad = SamsaRaLight::data_cloture20$radiations,     latitude = SamsaRaLight::data_cloture20$info[[\"latitude\"]],           # Stand geometry     slope = SamsaRaLight::data_cloture20$info[[\"slope\"]],      aspect = SamsaRaLight::data_cloture20$info[[\"aspect\"]],      north_to_x_cw = SamsaRaLight::data_cloture20$info[[\"north_to_x_cw\"]],     cell_size = sl_stand$info$cell_size,      n_cells_x = sl_stand$info$n_cells_x,      n_cells_y = sl_stand$info$n_cells_y,          # Consider a turbid medium as the transmission model (default is TRUE)     turbid_medium = TRUE,          # Use a torus system for representing plot edges (default to TRUE)     use_torus = TRUE,          # Consider trunk interception (default is TRUE)     trunk_interception = TRUE   )            # Compute the mean residuals   out_residuals[[i]] <-           dplyr::left_join(              data_sensors %>%          dplyr::select(id_sensor, pacl) %>%          dplyr::rename_at(vars(-\"id_sensor\"), ~paste0(., \"_obs\")),              sl_out_sensors_test$output$sensors %>%          dplyr::select(id_sensor, pacl) %>%          dplyr::rename_at(vars(-\"id_sensor\"), ~paste0(., \"_pred\")),       by = \"id_sensor\"            ) %>%           dplyr::mutate(       res = pacl_obs - pacl_pred     ) %>%           dplyr::summarise(res = mean(res)) %>%      dplyr::mutate(lad = lad, .before = res) }  time_end <- Sys.time() time_elapsed <- time_end - time_start  out_residuals <- dplyr::bind_rows(out_residuals) print(paste(\"Testing\", length(LADs), \"LAD values\"))  #> [1] \"Testing 2000 LAD values\" print(time_elapsed) #> Time difference of 4.12793 mins"},{"path":"https://natheob.github.io/SamsaRaLight/articles/7-light_sensors.html","id":"find-the-optimised-lad","dir":"Articles","previous_headings":"A first approach for LAD calibration","what":"Find the optimised LAD","title":"7 - Add light sensors","text":"optimized mean LAD appeared 0.775, indicates default value 0.5 relevant.","code":"best_lad <- out_residuals$lad[which.min(abs(out_residuals$res))] text_best_lad <- textGrob(as.character(best_lad),                           gp=gpar(fontsize=13, fontface=\"bold\",                                   col = \"salmon\")) ggplot(out_residuals, aes(y = res, x = lad)) +   geom_point() +   geom_hline(yintercept = 0, color = \"darkgray\") +   geom_vline(xintercept = best_lad, color = \"salmon\") +   annotation_custom(text_best_lad,                      xmin=best_lad, xmax=best_lad,                      ymin=-0.97, ymax=-0.85) +    coord_cartesian(clip = \"off\") +   theme_bw() +   ylab(\"Residuals between observed and predicted PACL\") +   xlab(\"Leaf area density LAD\")"},{"path":"https://natheob.github.io/SamsaRaLight/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Natheo Beauchamp. Author, maintainer.           R package developper Gauthier Ligot. Author, copyright holder.           Java Capsis developper algorithm improvment Francois de Coligny. Author.           Java Capsis developper Maxime Jaunatre. Author.           R package support developper Benoit Courbaud. Author, copyright holder.           Algorithm theory creator","code":""},{"path":"https://natheob.github.io/SamsaRaLight/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beauchamp N, Ligot G, de Coligny F, Jaunatre M, Courbaud B (2025). SamsaRaLight: Forest light computation. R package version 1.0, https://natheob.github.io/SamsaRaLight/.","code":"@Manual{,   title = {SamsaRaLight: Forest light computation},   author = {Natheo Beauchamp and Gauthier Ligot and Francois {de Coligny} and Maxime Jaunatre and Benoit Courbaud},   year = {2025},   note = {R package version 1.0},   url = {https://natheob.github.io/SamsaRaLight/}, }"},{"path":"https://natheob.github.io/SamsaRaLight/index.html","id":"samsaralight","dir":"","previous_headings":"","what":"Forest light computation","title":"Forest light computation","text":"SamsaraLight ray tracing model (Courbaud et al. 2003) estimates light interception tree within stand light arrives ground. SamsaraLight spatially explicit, individual-based model estimate amount light intercepted tree throughout growing season. based light beam interception attenuation 3D crowns tree stand. SamsaraLight model initially implemented within Java platform Capsis (https://capsis.cirad.fr/capsis/help_en/samsaralight). However, sake fast computing easier use within R paradigm, needed reformulate model R package used Rcpp C++ script fast computing.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/index.html","id":"global-description","dir":"","previous_headings":"","what":"Global description","title":"Forest light computation","text":"Firstly, stand divided square cells size. trees explicitly located within stand crowns represented space. Secondly, projects monthly diffuse direct rays towards center cell composing stand, energy given global energy month per m2m^2. involves estimating geometry, quantity energy monthly direct diffuse radiation given latitude. calculates plot angles intensity diffuse direct light beams depending plot latitude. , one give global energy horizontal plane (MJ.ha−1MJ.ha^{-1}) ratio diffuse global energy given month (see chapter ). Thus, ray intercepts crown tree, intercepted light energy calculated considering crown turbid medium applying Beer-Lambert’s law, taking account incident energy ray leaf area density tree. assumes leaves arranged homogeneously aggregated within canopy. way, estimates attenuation energy light ray following successive interceptions tree crowns, calculates sum intercepted energy ray, trees stand. consider fact don’t know environment around stand, represents plot boundaries torus system (Courbaud et al. 2003). Indeed, trees around border stand described also participates attenuation coming rays. Thus, consider environment boundaries, overestimate interception light, especially trees closer plot boundaries","code":""},{"path":"https://natheob.github.io/SamsaRaLight/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Forest light computation","text":"can install development version SamsaRaLight GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"NatheoB/SamsaRaLight\")"},{"path":"https://natheob.github.io/SamsaRaLight/index.html","id":"applied-tutorials","dir":"","previous_headings":"","what":"Applied tutorials","title":"Forest light computation","text":"can find simple examples tutorial different stand situations different tree crown dimensions accuracy: Compute light interception simplified symmetric crowns Consider interception light trunks Complexify crown representation irregular crowns","code":""},{"path":[]},{"path":"https://natheob.github.io/SamsaRaLight/index.html","id":"stand-geometry","dir":"","previous_headings":"Inputs","what":"Stand geometry","title":"Forest light computation","text":"first need consider geometry stand argument sl_run() function. need latitude plot (Y-coordinate WGS84 system) computation angle azimuth diffuse direct rays. forest stand defined flat plane given : slope (uniform slope degrees flat plane) aspect (Angle slope bottom compass North, clockwise rotation degrees. northern aspect = 0, eastern aspect = 90, southern aspect = 180, western aspect = 270) north_to_x_cw (Angle North x axis clockwise degrees, default 90 value corresponds Y axis oriented toward North) need define size plot setting size (cell_size) number cells composing plot (n_cells_x n_cells_x, respectively number cells column row). diffuse direct rays launch towards center cell computed azimuth angle. , cells plot, rays launched , longer calculation time .","code":""},{"path":"https://natheob.github.io/SamsaRaLight/index.html","id":"trees-description","dir":"","previous_headings":"Inputs","what":"Trees description","title":"Forest light computation","text":", need provide well formatted data.frame containing description tree plot. trees data.frame contain variables, correct name type column: id_tree: Unique id tree (integer) x, y: Relative location tree stand (double, m) crown_type: Type crown form. “E” “P” symmetric crown (see tutorial n°1). “2E”, “8E” “4P” irregular crowns (see tutorial n°3) (character) dbh_cm: Diameter breast height (1.30m) trunk tree (double, cm) (Can set NA one consider light interception trunks, otherwise, see tutorial n°2) h_m: Height top tree crown ground (double,  hbase_m: Height tree crown base (double, m) hmax_m; Height tree crown diameter biggest (double, m) rn_m, rs_m, re_m, rw_m: Tree crown radius hmax towards respectively North, South, East West (m, double). crown_lad: Leaf Area Density tree crown (m2/m3) (.e. surface leave per volume crown, considering homogeneous crown). (Used computing interception crown considered turbid medium, .e argument turbid_medium = TRUE, can set NA otherwise). (double) crown_openess: Crown Openness tree (unit) (.e. Fraction energy light ray crossing crown intercepted). (Used computing interception crown considered porous envelop, .e argument turbid_medium = FALSE, can set NA otherwise). (double)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/index.html","id":"monthly-radiation","dir":"","previous_headings":"Inputs","what":"Monthly radiation","title":"Forest light computation","text":"also need provide data.frame indicates monthly radiations. need provide three columns 12 rows, indicating radiations month: month: month 1 12 Hrad: monthly global radiation horizontal plane MJ.m^2 DGratio: ratio monthly diffuse energy global energy (needed compute direct energy) can fetch data.frame given latitude longitude using function get_monthly_rad(). fetches monthly data given start end year (range 2005 2020) PVGIS database https://joint-research-centre.ec.europa.eu/pvgis-photovoltaic-geographical-information-system_en. , can choose average monthly values years 2005 2020 choose values given year.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/index.html","id":"outputs","dir":"","previous_headings":"","what":"Outputs","title":"Forest light computation","text":"function returns list two data.frames: trees: Light interception tree epot: Potential energy intercepted tree without neighbours (MJ/year) e: Energy intercepted tree considering competition neighbours (MJ/year) cells: Light coming cell plot e: Total energy arriving cell (MJ/year) erel: Relative energy coming cell compared one canopy. ranges 0 (light ground) 1 (energy intercepted trees).","code":""},{"path":"https://natheob.github.io/SamsaRaLight/index.html","id":"speed-analysis","dir":"","previous_headings":"","what":"Speed analysis","title":"Forest light computation","text":"can find comparison speed R-based Capsis-based SamsaraLight different degree stand complexity sizes.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/index.html","id":"scientific-papers","dir":"","previous_headings":"","what":"Scientific papers","title":"Forest light computation","text":"[1] Courbaud, B. et al. (2015). “Applying ecological model evaludation: Lessons learned forest dynamics model Samsara2”. Ecological Modelling 314, p. 1. doi: 10.1016/j.ecolmodel.2015.06.039. [2] Courbaud, B., F. de Coligny, T. Cordonnier (2003). “Simulating radiation distribution heterogeneous Norway spruce forest slope”. Agricultural Forest Meteorology 116.1, pp. 1–18. doi: 10.1016/S0168-1923(02)00254-X. [3] Ligot, G., Balandier, P., Courbaud, B., Claessens, H., 2014. “Forest radiative transfer models: approach application?”. Can. J. . Res. 44:385-397. https://hdl.handle.net/2268/163600 [4] Ligot, G., Balandier, P., Coubraud, B., Jonard, M., Kneeshaw, D., Claessens, H, 2014. “Managing understory light maintain mixture species different shade tolerance”. . Ecol. Manage. 327:189-200.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/create_rect_stand.html","id":null,"dir":"Reference","previous_headings":"","what":"Center the surveyed trees of the core polygon in a rectangle plot — create_rect_stand","title":"Center the surveyed trees of the core polygon in a rectangle plot — create_rect_stand","text":"Center surveyed trees core polygon rectangle plot","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/create_rect_stand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Center the surveyed trees of the core polygon in a rectangle plot — create_rect_stand","text":"","code":"create_rect_stand(   trees,   cell_size,   core_polygon_df = NULL,   use_rect_zone = FALSE,   fill_around = FALSE )"},{"path":"https://natheob.github.io/SamsaRaLight/reference/create_rect_stand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Center the surveyed trees of the core polygon in a rectangle plot — create_rect_stand","text":"trees data.frame one row tree position (x,y) grid. must composed two columns \"x\" \"y\" cell_size double - Length side squared cell composing stand (meters) core_polygon_df data.frame - Coordinates vertices composing core polygon. must composed two columns \"x\" \"y\" use_rect_zone boolean - consider delimitation inventory zone, used define square plot fill_around TRUE, filling trees aorund. Either use given computed core polygon (FALSE), minimum-area enclosing rectangle polygon (TRUE). fill_around boolean - TRUE, add trees around core polygon within stand stand reach total basal area per hectare core polygon","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_IRRES1.html","id":null,"dir":"Reference","previous_headings":"","what":"Information for IRRES1 inventory — data_IRRES1","title":"Information for IRRES1 inventory — data_IRRES1","text":"Information IRRES1 inventory Ardennes (Belgium) used example informing inventory zone core polygon.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_IRRES1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information for IRRES1 inventory — data_IRRES1","text":"","code":"data(data_IRRES1)"},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_IRRES1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Information for IRRES1 inventory — data_IRRES1","text":"data_IRRES1, named list 5 elements: trees data.frame contains tree, information location, species, size, size crown crown information. id_tree Unique id tree. (integer) species Species Latin name. (character) x, y Coordinates base tree forest stand m. (double) dbh_cm Diameter breast height (1.30m) trunk tree cm. (double) crown_type Type crown paraboloid (P) ellispoid (E). (character) h_m Height tree trunk m. (double) hbase_m Crown base height tree (.e. height wich crown start) m. (double) hmax_m Height crown radius maximum. Set NA case simple crown shapes (\"P\" \"E\"), otherwise, values considered hmax automatically computed. rn_m, rs_m, re_m, rw_m Biggest radius tree crown m (double) crown_openess Crown Openness tree (unit) (.e. Fraction energy light ray crossing crown intercepted). Used computing interception crown considered porous envelop. (double) crown_lad Leaf Area Density tree crown m2/m3 (.e. surface leave per volume crown, considering homogeneous crown). Used computing interception crown considered turbid medium. (double) sensors data.frame contains information stand sensors core_polygon data.frame containing vertices tree inventory zone, described coordinates (x, y) vertex edge. radiation data.frame contains monthly radiations. month Unique id tree. (integer) Hrad Monthly radiation horizontal plane MJ. (double) DGratio Ratio monthly diffuse global energies. (double) info named numeric vector site information: latitude Latitude site (decimal degrees). longitude Longitude site (decimal degrees). size_x Horizontal extent site (meters). , set NA inventory defined core polygon. size_y Vertical extent site (meters). , set NA inventory defined core polygon. slope Mean slope terrain (degrees). aspect Aspect (degrees north). north_to_x_cw Angle north x-axis (clockwise, degrees).","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_IRRES1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Information for IRRES1 inventory — data_IRRES1","text":"Gauthier Ligot (Gembloux Agro-Bio Tech)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_bechefa.html","id":null,"dir":"Reference","previous_headings":"","what":"Information for bechefa inventory — data_bechefa","title":"Information for bechefa inventory — data_bechefa","text":"Information bechefa marteloscope Belgium used example estimating light interception using complex asymmetric crown shapes.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_bechefa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information for bechefa inventory — data_bechefa","text":"","code":"data(data_bechefa)"},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_bechefa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Information for bechefa inventory — data_bechefa","text":"data_bechefa, named list 4 elements: trees data.frame contains tree, information location, species, size, size crown crown information. id_tree Unique id tree. (integer) species Species Latin name. (character) x, y Coordinates base tree forest stand m. (double) dbh_cm Diameter breast height (1.30m) trunk tree cm. (double) crown_type Type crown paraboloid (P) ellispoid (E). (character) h_m Height tree trunk m. (double) hbase_m Crown base height tree (.e. height wich crown start) m. (double) hmax_m Height crown radius maximum. Set NA case simple crown shapes (\"P\" \"E\"), otherwise, values considered hmax automatically computed. rn_m, rs_m, re_m, rw_m Biggest radius tree crown m (double) crown_openess Crown Openness tree (unit) (.e. Fraction energy light ray crossing crown intercepted). Used computing interception crown considered porous envelop. (double) crown_lad Leaf Area Density tree crown m2/m3 (.e. surface leave per volume crown, considering homogeneous crown). Used computing interception crown considered turbid medium. (double) core_polygon data.frame containing vertices tree inventory zone, described coordinates (x, y) vertex edge. radiation data.frame contains monthly radiations. month Unique id tree. (integer) Hrad Monthly radiation horizontal plane MJ. (double) DGratio Ratio monthly diffuse global energies. (double) info named numeric vector site information: latitude Latitude site (decimal degrees). longitude Longitude site (decimal degrees). size_x Horizontal extent site (meters). , set NA inventory defined core polygon. size_y Vertical extent site (meters). , set NA inventory defined core polygon. slope Mean slope terrain (degrees). aspect Aspect (degrees north). north_to_x_cw Angle north x-axis (clockwise, degrees).","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_bechefa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Information for bechefa inventory — data_bechefa","text":"Gauthier Ligot (Gembloux Agro-Bio Tech)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_cloture20.html","id":null,"dir":"Reference","previous_headings":"","what":"Information for cloture20 inventory — data_cloture20","title":"Information for cloture20 inventory — data_cloture20","text":"Information cloture20 inventory Belgium used example complex core polygon demonstrating light sensors.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_cloture20.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information for cloture20 inventory — data_cloture20","text":"","code":"data(data_cloture20)"},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_cloture20.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Information for cloture20 inventory — data_cloture20","text":"data_cloture20, named list 5 elements: trees data.frame contains tree, information location, species, size, size crown crown information. id_tree Unique id tree. (integer) species Species Latin name. (character) x, y Coordinates base tree forest stand m. (double) dbh_cm Diameter breast height (1.30m) trunk tree cm. (double) crown_type Type crown paraboloid (P) ellispoid (E). (character) h_m Height tree trunk m. (double) hbase_m Crown base height tree (.e. height wich crown start) m. (double) hmax_m Height crown radius maximum. Set NA case simple crown shapes (\"P\" \"E\"), otherwise, values considered hmax automatically computed. rn_m, rs_m, re_m, rw_m Biggest radius tree crown m (double) crown_openess Crown Openness tree (unit) (.e. Fraction energy light ray crossing crown intercepted). Used computing interception crown considered porous envelop. (double) crown_lad Leaf Area Density tree crown m2/m3 (.e. surface leave per volume crown, considering homogeneous crown). Used computing interception crown considered turbid medium. (double) sensors data.frame contains information stand sensors core_polygon data.frame containing vertices tree inventory zone, described coordinates (x, y) vertex edge. radiation data.frame contains monthly radiations. month Unique id tree. (integer) Hrad Monthly radiation horizontal plane MJ. (double) DGratio Ratio monthly diffuse global energies. (double) info named numeric vector site information: latitude Latitude site (decimal degrees). longitude Longitude site (decimal degrees). size_x Horizontal extent site (meters). , set NA inventory defined core polygon. size_y Vertical extent site (meters). , set NA inventory defined core polygon. slope Mean slope terrain (degrees). aspect Aspect (degrees north). north_to_x_cw Angle north x-axis (clockwise, degrees).","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_cloture20.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Information for cloture20 inventory — data_cloture20","text":"Gauthier Ligot (Gembloux Agro-Bio Tech)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_prenovel.html","id":null,"dir":"Reference","previous_headings":"","what":"Information for Prenovel inventory — data_prenovel","title":"Information for Prenovel inventory — data_prenovel","text":"Information Prenovel marteloscope Jura (France) used example light interception symetrical crowns.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_prenovel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information for Prenovel inventory — data_prenovel","text":"","code":"data(data_prenovel)"},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_prenovel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Information for Prenovel inventory — data_prenovel","text":"data_prenovel, named list 3 elements: trees data.frame contains tree, information location, species, size, size crown crown information. id_tree Unique id tree. (integer) species Species Latin name. (character) x, y Coordinates base tree forest stand m. (double) dbh_cm Diameter breast height (1.30m) trunk tree cm. (double) crown_type Type crown paraboloid (P) ellispoid (E). (character) h_m Height tree trunk m. (double) hbase_m Crown base height tree (.e. height wich crown start) m. (double) hmax_m Height crown radius maximum. Set NA case simple crown shapes (\"P\" \"E\"), otherwise, values considered hmax automatically computed. rn_m, rs_m, re_m, rw_m Biggest radius tree crown m (double) crown_openess Crown Openness tree (unit) (.e. Fraction energy light ray crossing crown intercepted). Used computing interception crown considered porous envelop. (double) crown_lad Leaf Area Density tree crown m2/m3 (.e. surface leave per volume crown, considering homogeneous crown). Used computing interception crown considered turbid medium. (double) radiation data.frame contains monthly radiations. month Unique id tree. (integer) Hrad Monthly radiation horizontal plane MJ. (double) DGratio Ratio monthly diffuse global energies. (double) info named numeric vector site information: latitude Latitude site (decimal degrees). longitude Longitude site (decimal degrees). size_x Horizontal extent site (meters). size_y Vertical extent site (meters). slope Mean slope terrain (degrees). aspect Aspect (degrees north). north_to_x_cw Angle north x-axis (clockwise, degrees).","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/data_prenovel.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Information for Prenovel inventory — data_prenovel","text":"Courbaud Benoit (INRAe LESSEM Grenoble)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/get_bottom_azimut.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute bottom azimut — get_bottom_azimut","title":"Compute bottom azimut — get_bottom_azimut","text":"Compute bottom azimut","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/get_bottom_azimut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute bottom azimut — get_bottom_azimut","text":"","code":"get_bottom_azimut(aspect, north_to_x_cw)"},{"path":"https://natheob.github.io/SamsaRaLight/reference/get_bottom_azimut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute bottom azimut — get_bottom_azimut","text":"aspect double - Angle slope bottom compass North, clockwise rotation (degrees) northern aspect : 0, eastern aspect : 90, southern aspect : 180, western aspect : 270 north_to_x_cw double - Angle North x axis clockwise. (degrees) Default correspond Y axis oriented toward North.","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/get_monthly_rad.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch monthly radiations — get_monthly_rad","title":"Fetch monthly radiations — get_monthly_rad","text":"Fetch monthly radiation data PVGIS website (API) start end year (limit years 2005 2020). Fetched variables Hrad = horizontal plane irradiation DGratio = ratio diffuse global radiation (horizontal plane). ! NEED INTERNET CONNECTION ACCESS DATA API !","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/get_monthly_rad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch monthly radiations — get_monthly_rad","text":"","code":"get_monthly_rad(   latitude,   longitude,   start_year = 2005,   end_year = 2020,   average_years = TRUE )"},{"path":"https://natheob.github.io/SamsaRaLight/reference/get_monthly_rad.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fetch monthly radiations — get_monthly_rad","text":"https://joint-research-centre.ec.europa.eu/pvgis-photovoltaic-geographical-information-system_en","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/get_monthly_rad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch monthly radiations — get_monthly_rad","text":"latitude latitude plot longitude longitude plot start_year positive integer 2005 2020 - start year fetch monthly data end_year positive integer 2005 2020 - end year fetch monthly data average_years TRUE, years averaged obtain single value month","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/get_monthly_rad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch monthly radiations — get_monthly_rad","text":"Monthly horizontal radiation (Hrad) diffuse global ratio (DGratio) averaged start_year end_year","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/get_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute z coordinate of a point (x,y). — get_z","title":"Compute z coordinate of a point (x,y). — get_z","text":"Compute z coordinate point (x,y).","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/get_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute z coordinate of a point (x,y). — get_z","text":"","code":"get_z(x, y, slope_rad, bottom_azimut_rad)"},{"path":"https://natheob.github.io/SamsaRaLight/reference/get_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute z coordinate of a point (x,y). — get_z","text":"x X-coordinate point y Y-coordinate point slope_rad Slope stand (radians) bottom_azimut_rad Azimuth vector orthogonal ground x,y system (radians)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/plot_sl_output.html","id":null,"dir":"Reference","previous_headings":"","what":"@param plot.trees Character string indicating the filling variables of the trees. Set it to NULL if you do not want to plot the trees — plot_sl_output","title":"@param plot.trees Character string indicating the filling variables of the trees. Set it to NULL if you do not want to plot the trees — plot_sl_output","text":"@param plot.trees Character string indicating filling variables trees. Set NULL want plot trees","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/plot_sl_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"@param plot.trees Character string indicating the filling variables of the trees. Set it to NULL if you do not want to plot the trees — plot_sl_output","text":"","code":"plot_sl_output(   sl_output,   trees.border.species = FALSE,   trees.fill = \"species\",   trees.fill.inverse = FALSE,   cells.border = FALSE,   cells.fill = NULL,   cells.fill.palette = c(\"base\", \"base01\", \"viridis\", \"viridis01\", \"light\", \"light01\") )"},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_compute_nrj_diffuse.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute energy of diffuse ray — sl_compute_nrj_diffuse","title":"Compute energy of diffuse ray — sl_compute_nrj_diffuse","text":"Calculating SamsaraLight rays diffuse Energy MJ/m2 plane perpendicular beam ray direction Standard Overcast Sky Uniform Overcast Sky possible","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_compute_nrj_diffuse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute energy of diffuse ray — sl_compute_nrj_diffuse","text":"","code":"sl_compute_nrj_diffuse(   soc,   total_diffuse,   height_angle_rad,   diffuse_anglestep_rad )"},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_compute_nrj_diffuse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute energy of diffuse ray — sl_compute_nrj_diffuse","text":"soc boolean - Standard Overcast Sky, false: Uniform Overcast Sky total_diffuse double - Total diffuse energy horizontal plan (kWh.m-2) height_angle_rad double - Angle beam soil (radians) diffuse_anglestep_rad double - Hour angle two diffuse beams (radians)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_compute_nrj_diffuse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute energy of diffuse ray — sl_compute_nrj_diffuse","text":"Energy per square meter horizontal plan (MJ.m-2)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_compute_sunazimut.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute sun azimut — sl_compute_sunazimut","title":"Compute sun azimut — sl_compute_sunazimut","text":"Computaion sun azimut given height angle reference system angle origin X > 0 axis trigonometric rotation","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_compute_sunazimut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute sun azimut — sl_compute_sunazimut","text":"","code":"sl_compute_sunazimut(   latitude_rad,   declination_rad,   hour_angle_rad,   height_angle_rad,   southazimut_ccw_rad )"},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_compute_sunazimut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute sun azimut — sl_compute_sunazimut","text":"latitude_rad double - Latitude plot (radians) declination_rad double - Declination angle radians: angle equator line drawn centre Earth centre sun hour_angle_rad double - Angle sun moves across sky (radians) height_angle_rad double - Angle beam soil (radians) southazimut_ccw_rad double - Azimuth south counterclockwise x axis (x,y) system (radians)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_monthly_rays.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute direct and diffuse rays of a growing season — sl_create_monthly_rays","title":"Compute direct and diffuse rays of a growing season — sl_create_monthly_rays","text":"Compute direct diffuse rays growing season","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_monthly_rays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute direct and diffuse rays of a growing season — sl_create_monthly_rays","text":"","code":"sl_create_monthly_rays(   monthly_rad,   latitude,   start_day = 1,   end_day = 365,   soc = TRUE,   slope = 0,   north_to_x_cw = 90,   aspect = 0,   height_anglemin = 10,   direct_startoffset = 0,   direct_anglestep = 5,   diffuse_anglestep = 15 )"},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_monthly_rays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute direct and diffuse rays of a growing season — sl_create_monthly_rays","text":"monthly_rad data.frame - Monthly horizontal radiation (Hrad) diffuse global ratio (DGratio) Computed function samsaRa::sl_get_monthlyrad() latitude double - Latitude plot (degrees) start_day integer 1 365 - First day vegetative period end_day integer 1 365 - Last day vegetative period soc boolean - Standard Overcast Sky, false: Uniform Overcast Sky slope double - Slope plot (degrees) north_to_x_cw double - Angle North x axis clockwise. (degrees) Default correspond Y axis oriented toward North. aspect double - Angle slope bottom compass North, clockwise rotation (degrees) northern aspect : 0, eastern aspect : 90, southern aspect : 180, western aspect : 270 height_anglemin double - Angle minimum beam soil (degrees) direct_startoffset double - Angle start first direct ray (degrees) direct_anglestep double - Hour angle two direct beams (degrees) diffuse_anglestep double - Hour angle two diffuse beams (degrees)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_monthly_rays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute direct and diffuse rays of a growing season — sl_create_monthly_rays","text":"list 3 elements : horizontal energy (double), slope energy (double) rays (data.frame) n rows 5 columns: azimutAzimut ray radians height_angleAngle beam soil (radians) eEnergy ray crossing canopy (MJ.m-2) directtrue ray direct false diffuse","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_rays_diffuse.html","id":null,"dir":"Reference","previous_headings":"","what":"Create diffuse rays — sl_create_rays_diffuse","title":"Create diffuse rays — sl_create_rays_diffuse","text":"Create SamsaraLight diffuse rays plane classical sky hemisphere divided meridians parallels can use Standard Overcast Sky Uniform Overcast Sky","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_rays_diffuse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create diffuse rays — sl_create_rays_diffuse","text":"","code":"sl_create_rays_diffuse(   soc,   total_diffuse,   height_anglemin_rad,   diffuse_anglestep_rad,   slope_rad,   bottom_azimut_rad )"},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_rays_diffuse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create diffuse rays — sl_create_rays_diffuse","text":"soc boolean - Standard Overcast Sky, false: Uniform Overcast Sky total_diffuse double - Total diffuse energy horizontal plan (kWh.m-2) height_anglemin_rad double - Angle minimum beam soil (radians) diffuse_anglestep_rad double - Hour angle two diffuse beams (radians) slope_rad double - Slope plan (radians) bottom_azimut_rad double - Azimut vector orthogonal ground (x,y) system (radians)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_rays_diffuse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create diffuse rays — sl_create_rays_diffuse","text":"list 3 elements : horizontal energy (double), slope energy (double) diffuse rays (data.frame)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_rays_direct.html","id":null,"dir":"Reference","previous_headings":"","what":"Create direct rays — sl_create_rays_direct","title":"Create direct rays — sl_create_rays_direct","text":"Create SamsaraLight diffuse rays plane classical sky hemisphere divided meridians parallels can use Standard Overcast Sky Uniform Overcast Sky","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_rays_direct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create direct rays — sl_create_rays_direct","text":"","code":"sl_create_rays_direct(   latitude_rad,   declination_rad,   nrj_direct_months,   height_anglemin_rad,   direct_anglestep_rad,   slope_rad,   bottom_azimut_rad,   southazimut_ccw_rad,   direct_startoffset_rad )"},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_rays_direct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create direct rays — sl_create_rays_direct","text":"latitude_rad double - Latitude plot (radians) declination_rad double - Declination angle radians: nrj_direct_months 12 double vect - Monthly direct energy horizontal plan (kWh.m-2) height_anglemin_rad double - Angle minimum beam soil (radians) direct_anglestep_rad double - Hour angle two diffuse beams (radians) slope_rad double - Slope plan (radians) bottom_azimut_rad double - Azimut vector orthogonal ground southazimut_ccw_rad double - Azimuth south counterclockwise x axis (x,y) system (radians) direct_startoffset_rad double - Angle start first direct ray (radians)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_create_rays_direct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create direct rays — sl_create_rays_direct","text":"list 3 elements : horizontal energy (double), slope energy (double) diffuse rays (data.frame)","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute samsara ligth radiative balance — sl_run","title":"Compute samsara ligth radiative balance — sl_run","text":"Compute samsara ligth radiative balance","code":""},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute samsara ligth radiative balance — sl_run","text":"","code":"sl_run(   trees,   monthly_rad,   sensors = NULL,   sensors_only = FALSE,   latitude = 46,   start_day = 1,   end_day = 365,   slope = 0,   north_to_x_cw = 90,   aspect = 0,   cell_size = 10,   n_cells_x = 10,   n_cells_y = 10,   soc = TRUE,   height_anglemin = 10,   direct_startoffset = 0,   direct_anglestep = 5,   diffuse_anglestep = 15,   use_torus = TRUE,   turbid_medium = TRUE,   trunk_interception = TRUE,   detailed_output = FALSE )"},{"path":"https://natheob.github.io/SamsaRaLight/reference/sl_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute samsara ligth radiative balance — sl_run","text":"trees data.frame one row tree 14 columns describing tree composing stand: id: Unique id tree x: X position tree within stand y: Y position tree within stand dbh_cm: Diameter breast height (1.3m) tree trunk (cm) crown_type: \"E\": symetric ellispoidal crown maximum crown radius middle crown depth. Crown radius mean value radius towards fourth cardinal points \"P\": symetric paraboloidal crown maximum crown radius crown base. crown radius mean value radius towards fourth cardinal points \"2E\": ellipsoidal crown composed two semi-ellipsoid (one one ). \"E\" height semi-ellipsoid given hmax_m variable \"8E\": ellispoidal crown composed eight eighth ellipsoids (four four ). \"2E\" radius eight ellipsoid given rn_m, rs_m, re_m, rw_m variables. \"4P\": paraboloidal crown composed four fourth paraboloid. Maximum crown radius crown base radius fourth paraboloid given rn_m, rs_m, re_m, rw_m variables. h_m: Height tree (meters) hbase_m: Height base tree crown (meters) hmax_m: Height maximum radius tree crown (meters) rn_m: Radius tree crown toward Northern direction (meters) rs_m: Radius tree crown toward Southern direction (meters) re_m: Radius tree crown toward Eastern direction (meters) rw_m: Radius tree crown toward Western direction (meters) crown_openess: Crown openess crown (unit) considering porous envelop (.e. constant proportion light energy interception ray intercepts crown) crown_lad: Leaf Area Density (m2 leaves per m3 crown) considering turbid medium (.e. density parameter Beer Lambert law ray intercepts crown) monthly_rad data.frame - Monthly horizontal radiation (Hrad) diffuse global ratio (DGratio) Computed function samsaRaLight::sl_get_monthlyrad() sensors data.frame - Position sensor within stand. Can set NULL sensor. id: Unique id sensor x: X position sensor within stand y: Y position sensor within stand h_m: Height ground sensor (meters) sensors_only boolean - compute interception sensors ? latitude double - Latitude plot (degrees) start_day integer 1 365 - First day vegetative period end_day integer 1 365 - Last day vegetative period slope double - Slope plot (degrees) north_to_x_cw double - Angle North x axis clockwise. (degrees) Default correspond Y axis oriented toward North. aspect double - Angle slope bottom compass North, clockwise rotation (degrees) northern aspect : 0, eastern aspect : 90, southern aspect : 180, western aspect : 270 cell_size double - Length side squared cell composing stand (meters) n_cells_x integer - Number cells X-axis side rectangle stand n_cells_y integer - Number cells Y-axis side rectangle stand soc boolean - Standard Overcast Sky, false: Uniform Overcast Sky height_anglemin double - Angle minimum beam soil (degrees) direct_startoffset double - Angle start first direct ray (degrees) direct_anglestep double - Hour angle two direct beams (degrees) diffuse_anglestep double - Hour angle two diffuse beams (degrees) use_torus True, compute light competition using borders modelled torus system, otherwise,borders open grasslands turbid_medium TRUE, crown considered turbid medium, otherwise, considered porous envelope trunk_interception Consider interception rays trunks detailed_output boolean - TRUE, sensors/cells/trees outputs also contain diffuse/direct energies, sensors/cells outputs contain energies slope horizontal plane. FALSE, energy given total energy (sum diffuse direct) slope trees cells horizontal plane sensors.","code":""}]
